（一）添加模态框
    引用bootstrap组件
    显示模态框
    $('').modal('show')
    隐藏模态框
    $('').modal('hide')

（二）实现分页查询
    设置用来分页的标签div
        <div id="myPage"></div>
    调用JQuery分页插件（放在成功查询函数里）
        $("#myPage").sPage({
          page: resp.data.page,//当前页码，必填
          total: resp.data.total,//数据总条数，必填
          pageSize: 3,//每页显示多少条数据，默认10条
          totalTxt: "共{total}条",//数据总条数文字描述，{total}为占位符，默认"共{total}条"
          showTotal: true,//是否显示总条数，默认关闭：false
          showSkip: true,//是否显示跳页，默认关闭：false
          showPN: true,//是否显示上下翻页，默认开启：true
          prevPage: "上一页",//上翻页文字描述，默认“上一页”
          nextPage: "下一页",//下翻页文字描述，默认“下一页”
          backFun: function (page) {
            //点击分页按钮回调函数，返回当前页码
            // console.log(page);
            articlesPageQuery(page);
          }
        });

（三）添加编辑器
    设置存放内容的标签div
        <div id='show_content'></div>
    初始化编辑器
        var E = window.wangEditor
        var editor = new E('#editor')
        // 或者 var editor = new E( document.getElementById('editor') )
        editor.create()
    注意：为了避免点击新增按钮重复添加编辑器，
    在新增按钮里初始化编辑器之前添加清空编辑器代码$('#editor').empty()

（四）添加上传图片
    设置长传按钮和显示图片的标签
        <input type="hidden" id="imagepath" name="">
        <button id='upload_duixiang'>上传</button>
        <div class="show"></div>
    设置全局变量
        存放图片信息var article_src;
    获取封装好的本地服务器的图片管理的代码
        a = $("#upload_duixiang").FraUpload({
            view: ".show", // 视图输出位置
            url: "http://134.175.100.63:5588/file/upload", // 上传接口
            fetch: "img", // 视图现在只支持img
            debug: false, // 是否开启调试模式
            /* 外部获得的回调接口 */
            onLoad: function (e) { // 选择文件的回调方法
                console.log("外部: 初始化完成...");
            },
            breforePort: function (e) { // 发送前触发
                console.log("文件发送之前触发");
            },
            successPort: function (e) { // 发送成功触发
                console.log("文件发送成功");
                onload_image()
            },
            errorPort: function (e) { // 发送失败触发
                console.log("文件发送失败");
                onload_image()
            },
            deletePost: function (e) { // 删除文件触发
                console.log("删除文件");
                console.log(e);
                alert('删除了' + e.filename)
                onload_image()
            },
            sort: function (e) { // 排序触发
                console.log("排序");
                onload_image()
            },
        });
        // 获取图片上传信息
        function onload_image() {
            var res = a.FraUpload.show()
            var ids = [];
            for (let k in res) {
                this_val = res[k]
                if (!empty(res[k]['is_upload']) && !empty(res[k]['ajax'])) {
                ajax_value = res[k]['ajax'];
                ids.push(ajax_value.data.id)
                }
            }
            $("#imagepath").val(ids);
            article_src = res[0].ajax.data
            }
            //判断变量是否为空 
            function empty(value) {
            if (value == "" || value == undefined || value == null || value == false || value == [] || value == {}) {
                return true;
            } else {
                return false;
            }
        }
    获取上传的图片网络地址
        source: 'http://134.175.100.63:8686/group1/' + article_src.id
    注：为了避免点击新增按钮重复产生显示图片的标签，
    在新增按钮里初始化之前增加清空代码$('.show').empty();

（五）批量删除
    查看接口/category/batchDelete
    1.选中被选中的复选框，$('input:checked')
    2.用toArray(),把选中的元素放到一个数组里
    3.在初始化元素方法里，为复选框添加value等于元素id<td><input type="checkbox" value='`+item.id+`'></td>
    获取选中元素的id，用map()遍历
    var ids = $(':checkbox:checked').toArray().map(function (item) {
        return item.value
    })
    4.数组元素转换成字符串toString()，传给ajax
          ids = ids.toString();
    5.删除成功，需要刷新数据和清除复选框
            success: function () {
              findAllCategory();
              alert('删除成功')
              //清空复选框，prop()
              $('input:checked').prop('checked',false)
            }
（六）优化修改
    实现与新增按钮的公用ajax，数据交互绑定在模态框的保存并退出按钮上。
    访问接口/article/saveOrUpdate
    1.给保存提交按钮绑定事件
        获取表单数据
    2.判断id，确定传给ajax的数据data
        if (id) {
            data = {
            id,
            title,
            categoryId,
            content,
            source: 'http://134.175.100.63:8686/group1/' + article_src.id
            }
        } else {
            data = {
            title,
            categoryId,
            content,
            source: 'http://134.175.100.63:8686/group1/' + article_src.id
            }
        }
        if (title && categoryId && content) {
            $.ajax({
            url: 'http://localhost:7788/article/saveOrUpdate',
            method: 'post',
            data: data,
            headers: { 'Authorization': token },
            success: function (resp) {
                articlesPageQuery(1);
                $('#add_modal').modal('hide');
                alert(resp.message);
            }
            })
        } else {
            alert('请输入完整的数据！')
        }
    3.给修改按钮绑定事件，获取并赋值给表单当前行的id值
        $('#article_id').val($(this).closest('tr')[0].children[1].innerText)
    4.显示模态框
        $('#add_modal').modal('show');
（七）详情
    访问接口/article/findById
    获取当前行id，传给ajax
    把要展示的东西添加到模态框
（八）时间戳转日期格式
    function timestampToTime(timestamp) {
        var date = new Date(timestamp);//时间戳为10位需*1000，时间戳为13位的话不需乘1000
        Y = date.getFullYear() + '-';
        M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
        D = date.getDate() + ' ';
        h = date.getHours() + ':';
        m = (date.getMinutes() < 10 ? '0' + (date.getMinutes()) : date.getMinutes()) + ':';
        s = (date.getSeconds() < 10 ? '0' + (date.getSeconds()) : date.getSeconds());
        return Y + M + D + h + m + s;
    }

补充：
Array.prototype.map(handler)创建一个新数组，返回一个由原数组每个元素执行回调函数的结果组成的新数组。
        参数：
            currentValue    数组中正在处理的当前元素
            index   数组中正在处理的当前元素的索引
            array   map方法调用的数组
            thisArg 执行回调函数时值被用作this
jQuery元素方法
    toArray()   以数组的形式返回 jQuery 选择器匹配的元素。
    jQuery属性值操作
        prop()  设置或返回被选元素的属性和值
                设置的属性为一个或多个属性值对
        removeProp()    移除属性
        attr()  设置或返回被选元素的html属性和值。
    find(jq对象)  沿 DOM 树遍历，查找并返回被选元素的后代元素
    children()  返回被选元素的直接子元素

    给jq节点添加内容的方法
        val()   返回或设置被选元素的 value 属性
        html()  设置或返回被选元素的内容（innerHTML）
        text()  设置或返回被选元素的文本内容。
